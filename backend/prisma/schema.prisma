// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(VISITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Token     Token[]
  children Child[]
  vaccineRemainders Vaccine[]
  booked_appointments Appointment[] @relation("User")
  set_appointments Appointment[] @relation("Doctor")
}

model Token {
  id     Int    @id @default(autoincrement())
  userId Int
  token  String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

}

model Child {
  id Int @id @default(autoincrement())
  name String 
  dob DateTime @db.Date 
  parentId Int
  parent User @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vaccines Vaccine[]
  appointments Appointment[]
}

model VaccineList {
  id Int @id @default(autoincrement())
  name String
  months Int
  description String? @db.Text
  bookings Vaccine[]
}

model Vaccine {
  id Int @id @default(autoincrement())
  description String?  @db.Text
  dueDate DateTime @db.Date
  childId Int
  parentId Int
  vaccineId Int
  completed Boolean @default(false)
  vaccine VaccineList @relation(fields: [vaccineId] , references: [id], onDelete: Cascade, onUpdate:NoAction)
  child Child @relation(fields: [childId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parent User @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Appointment {
  id String @id @default(uuid())
  requested_time DateTime
  appointed_time DateTime?
  reason String?
  cancelled Boolean @default(false)
  doctorId Int
  userId Int
  childId Int
  user User @relation(name: "User",fields: [userId],references: [id], onDelete: Cascade, onUpdate: NoAction)
  doctor User @relation(name: "Doctor",fields: [doctorId],references: [id], onDelete: Cascade, onUpdate: NoAction)
  child Child @relation(fields: [childId], references: [id],onDelete: Cascade,onUpdate: NoAction)
}

enum Role {
  VISITOR
  DOCTOR
  ADMIN
}
